Titulo: "Mayor ortografia, nuevos ramales, nuevos choferes, nuevo sistema. Todo listo para que la usen"
Mensaje: "Mejoramos la ortografia en la web, agregamos los ramales de algunas lineas, les agregamos los permisos necesarios a los nuevos choferes y cargamos un nuevo sistema para que las capturas se manden antes de mandar la planilla."
Cambios: "
 - Agregar ortografia en la descipcion de los internos.
 - Agregar nuevos choferes: 
   - <@1101319064674123856>
   - <@929100429634207795>
   - <@1197319917045821453>
   - <@1383864671727124621>
 - Se agregaron los ramales 84A, 373A, 271B y 570A.
 - Nuevo sistema al momeento de planillar. Ahora las capturas se cargan antes de mandar la planilla.
"

======================================== Funcion para subir y recibir imagenes en codigo binario:
Haz exactamente lo que te digo, si quieres le puedes retocar un poco pero que la idea principal sea lo que te voy a decir.
Crea un miniproyecto para que luego lo incorpore a mi PROYECTO gigante, (te dare algunos datos por si los llegas a necesitar, esos datos serian sobre el funcionamiento y la idea en la que esta planeado el proyecto).
El miniproyecto tendra los sigueintes assets: {
    - "incorporacion.html" (aqui ira toda la incorporacion para luego cargarlo al HTML de mi web).
    - "I-script.js" (aqui ira toda la incorporacion para luego cargarlo al script de mi web - Recuerda que aqui iran las funciones que no van a utilizar a la bae de datos).
    - "I-script2.js" (aqui ira toda la incorporacion para luego cargarlo al script de mi web - Recuerda que aqui iran las funciones que van a utilizar a la bae de datos).
}

La version de mi base de datos es la 9.23, no te preocupes por la configuracion de la base de datos porque ya la tengo colocada correctamnete.
Lo que hara este miniproyecto seran 2 cosas principalmente, una de ellas sera subir las imagenes y la otra sera recibir las imagenes.
Lo que hara la funcion que va a enviar las imagenes sera lo siguiente:
1. El usuario podra seleccionar desde 1 a 8 imagenes que tenga en su dispositivo.
2. Al cargar la/s imagen/es seleccionadas por el usuario, la funcion hara que se procesen esa/s imagen/es para convertirlas 1x1 en codigo binario.
3. Se ejecutara: "generarCodigoUnico()"para obtener una ID.
4. En: "Base de Datos > capturas >" se creara un docuemnto de informacion. El nombre del docuemnto sera lo obtenido al ejeuctar la funcion que se mencionaba en el punto 3. El contenido de este docuemnto sera creado con el siguiente formato: "
img1: [codigo binario de la primera imagen subida/cargada/seleccionada por el usuario]"
//Asi se hara consecutivamente dependiendo cuantas imagenes halla cargado el usuario.


Ahora hagamos el sistema que recibe la/s imagen/es:
Luego de que el usaurio introduzca el ID en el input. El usuario hara clic en el boton que hay debajo. Lo que hara que se haga lo siguiente:
1.1. Buscar en: "Base de Datos > capturas >" alli se buscara un documento CON EXACTAMENTE el mismo contenido que el usuario puso en el input.
1.2. Si no se encuentra ningun docuemnto con esa ID saldra el alert: "No hay capturas asignadas a esa ID".
1.3. Si se encuentra un docuemnto con la ID, se procesaran todos los codigos binarios para convertirlos en imagenes. Luegode convertirlas, se colocaran en un div.

Contenido visula del HTML:
Titulo (h1): "Cargar Capturas de Una Planilla".
Texto (p): "Seleccionas las capturas que deseas cargar".
INPUT {Texto interior: "Escribe la ID de la planilla a la que se asignara"}.
INPUT (aqui el usuario selecciionara las imagens).
div {class="separador"}><
Titulo (h1): "Ver Capturas de Una Planilla".
Texto (p): "Coloca la ID de la planilla de la que deseas verlas capturas".
INPUT {Texto interior: "Coloca aqui la ID}.
======================================== Datos que te podran ayudar para realizar todo correctamente:
- Primero creame todo como lo deberia de tener un proyecto para que luego, si me convence, lo agregue a mi proyecto.
Contenido de la funcion: "generarCodigoUnico()":
generarCodigoUnico() {
    const año = new Date().getFullYear();
    const letras = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const parteLetra = letras[Math.floor(Math.random() * letras.length)] + letras[Math.floor(Math.random() * letras.length)];
    const parteNum = Math.floor(100 + Math.random() * 900); // ej: 123
    return `GTG-${año}-${parteLetra}${parteNum}`;
}
La funcion que se encargara de enviar las imagenes se agregara a la siguiente funcion. Para que cuando se envie la planilla tambien se envien las fotos:
async function guardarPlanilla() {
    alert("Enviando planilla, por favor espere...");
    const codigoPlanilla = generarCodigoUnico();
    const chofer = document.getElementById('chofer').value.trim();
    const planillas1 = document.getElementById('planillas1').value.trim();
    const planillas2 = document.getElementById('planillas2').value.trim();
    const planillas3 = document.getElementById('planillas3').value.trim();
    if (!chofer || !ramalSeleccionado || !internoSeleccionado || !planillas1 || vueltasGenerales.length === 0) {
        alert("⚠️ Debes completar los campos obligatorios y cargar al menos una vuelta general.");
        return;
    }
    try {
        const nuevaPlanilla = {
            chofer,
            interno: internoSeleccionado,
            ramal: ramalSeleccionado,
            recorrido: document.getElementById('recorrido-info').value,
            vueltas: vueltasGenerales,
            planillas1,
            planillas2: planillas2 || 0,
            planillas3: planillas3 || 0,
            estado: "pendiente",
            timestamp: new Date(),
            codigoPlanilla
        };
        await addDoc(collection(db, "planillas"), nuevaPlanilla);
        console.log("✅ Planilla registrada");
        enviarMensaje(nuevaPlanilla);
        try {
            await deleteDoc(doc(db, "ubication", chofer));
            console.log(`Ubicación de ${chofer} eliminada tras enviar planilla.`);
        } catch (err) {
            console.warn(`No se pudo eliminar la ubicación de ${chofer}:`, err);
        }
        vueltasGenerales = [];
        limpiarCampos();
    } catch (error) {
        console.error("Error al guardar planilla:", error);
        alert("❌ Error al guardar planilla.");
    }
}

RECUERDA PRIMERO CREA EL miniproyecto DE PRUEBA PARA VER SI LO ADAPTAMOS A LA WEB O CANCELAMOS LA ACTUALIZAION.
===============================================================================================================
Perfecto, te paso todo lo que necesitas:

Pestaña donde los cohferes planillean:
<div id="chofers" class="contenedor" style="display: none;">
        <div class="seccion">
            <h2>Datos del Recorrido</h2>
            <div class="campo">
                <label for="chofer">Chofer:</label>
                <input type="text" id="chofer" name="chofer" placeholder="ID de Discord del Chofer" required>
            </div>
            <div class="campo">
                <button type="button" id="boton-ramal" class="boton-seleccion" onclick="abrirMenuRamales()">Indicar Ramal</button>
            </div>
            <div class="campo">
                <button type="button" id="boton-interno" class="boton-seleccion" onclick="abrirMenuInternos()">Indicar Interno</button>
            </div>
            <div class="campo">
                <label for="recorrido-info">Recorrido:</label>
                <input type="text" id="recorrido-info" readonly>
            </div>
        </div>
        <div class="seccion">
            <h2>IDA</h2>
            <div class="campo">
                <label for="ida1">Salida:</label>
                <input type="text" id="ida1" name="ida1" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('ida1')">⌚</button>
            </div>
            <div class="campo">
                <label for="ida2">Llegada:</label>
                <input type="text" id="ida2" name="ida2" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('ida2')">⌚</button>
            </div>
        </div>
        <div class="seccion">
            <h2>Descansos</h2>
            <div class="campo">
                <label for="descanso">Descanso 1:</label>
                <input type="text" id="descanso" name="descanso" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('descanso')">⌚</button>
            </div>
            <div class="campo">
                <label for="descanso2">Descanso 2 (opcional):</label>
                <input type="text" id="descanso2" name="descanso2" placeholder="HH:MM" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('descanso2')">⌚</button>
            </div>
        </div>
        <div class="seccion">
            <h2>VUELTA</h2>
            <div class="campo">
                <label for="vuelta1">Salida:</label>
                <input type="text" id="vuelta1" name="vuelta1" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('vuelta1')">⌚</button>
            </div>
            <div class="campo">
                <label for="vuelta2">Llegada:</label>
                <input type="text" id="vuelta2" name="vuelta2" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                <button type="button" class="boton-mini" onclick="horaActual('vuelta2')">⌚</button>
            </div>
        </div>
        </form>
        <div class="seccion">
            <div class="campo">
                <label for="planillas1">Planillas Generales:</label>
                <input type="number" id="planillas1" name="planillas1" placeholder="##" min="0" step="1" required>
            </div>
            <div class="campo">
                <label for="planillas2">Planillas Semanales:</label>
                <input type="number" id="planillas2" name="planillas2" placeholder="##" min="0" step="1">
            </div>
            <div class="campo">
                <label for="planillas3">Planillas Mensuales:</label>
                <input type="number" id="planillas3" name="planillas3" placeholder="##" min="0" step="1">
            </div>
        </div>
        <div class="seccion">
            <h2>Acciones</h2>
            <div class="acciones">
                <button type="button" onclick="guardarVueltaGeneral()">➕ Guardar Vuelta</button>
                <button type="button" onclick="document.getElementById('menu-vueltas').style.display = 'flex'; mostrarVueltasGenerales();">📋 Ver Vueltas Guardadas</button>
                <button type="button" class="discord" onclick="guardarPlanilla()">Enviar Planilla</button>
            </div>
        </div>
    </div>
Funcion que manda la planilla:
async function guardarPlanilla() {
    alert("Enviando planilla, por favor espere...");
    const codigoPlanilla = generarCodigoUnico();
    const chofer = document.getElementById('chofer').value.trim();
    const planillas1 = document.getElementById('planillas1').value.trim();
    const planillas2 = document.getElementById('planillas2').value.trim();
    const planillas3 = document.getElementById('planillas3').value.trim();
    if (!chofer || !ramalSeleccionado || !internoSeleccionado || !planillas1 || vueltasGenerales.length === 0) {
        alert("⚠️ Debes completar los campos obligatorios y cargar al menos una vuelta general.");
        return;
    }
    try {
        const nuevaPlanilla = {
            chofer,
            interno: internoSeleccionado,
            ramal: ramalSeleccionado,
            recorrido: document.getElementById('recorrido-info').value,
            vueltas: vueltasGenerales,
            planillas1,
            planillas2: planillas2 || 0,
            planillas3: planillas3 || 0,
            estado: "pendiente",
            timestamp: new Date(),
            codigoPlanilla
        };
        await addDoc(collection(db, "planillas"), nuevaPlanilla);
        console.log("✅ Planilla registrada");
        enviarMensaje(nuevaPlanilla);
        try {
            await deleteDoc(doc(db, "ubication", chofer));
            console.log(`Ubicación de ${chofer} eliminada tras enviar planilla.`);
        } catch (err) {
            console.warn(`No se pudo eliminar la ubicación de ${chofer}:`, err);
        }
        vueltasGenerales = [];
        limpiarCampos();
    } catch (error) {
        console.error("Error al guardar planilla:", error);
        alert("❌ Error al guardar planilla.");
    }
}
Pestaña en dponde los inspectores ven las planillas (aqui agregaras para ver las capturas debajo del boton de ver planilla):
    <div id="inspectores" class="contenedor" style="display: none;">
        <h2>Panel de Inspectores</h2>
        <div class="seccion">
            <h2>Funciones de Inspectores</h2>
            <button type="button" class="theme-toggle-button" onclick="obtenerPlanillas()">Ver Planillas</button>
            <button type="button" class="theme-toggle-button" onclick="abrirMenuEnviarMensaje()">Enviar Mensaje</button>
            <button type="button" class="theme-toggle-button" onclick="abrirMenuHistorialPlanillas()">Ver Historial de Planillas</button>
            <button type="button" class="theme-toggle-button" onclick="abrirMenuAgregarChofer()">Agregar un nuevo chofer</button>
            <button type="button" class="theme-toggle-button" onclick="abrirMenuLogs()">Ver Logs de Conexión</button>
        </div>
        <div class="seccion">
            <h2>Acceso Personal de la Empresa</h2>
            <button type="button" class="theme-toggle-button" onclick="abrirMenuAccionChofer()">Menú del Personal</button>
        </div>
        <div id="resumen-vueltas"></div>
    </div>
YA SABIENDO ESTO AHORA DIME QUE AGREGAR Y DENTRO DE DONDE