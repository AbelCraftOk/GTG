Titulo: "Mejoras en as ubicaciones de los Colectivos"
Mensaje: "Algunos cambios para los choferes y para los usaurios/pasajeros."
Cambios: "
- Nuevos estilos para la linea de informacion.
- Nuevos puntos estrategicos.
- Mejora de informacion al usaurio/pasajero.
"

Haz lo siguiente para configurar mi funcion de JS para HTML:
- Crea varios estilos para los <p> especiales que genera mi funcion: {
    - La parte del texto que se genera como: "[${data.ramal}]" sera: color: "celeste" y estara en negrita.
    - La parte del texto que se genera como: "${data.chofer}" sera: color: "rojo" y estara en negrita.
    - La parte del texto que se genera como: "${data.ubicacion}" sera: color: "verde lima" y estara en negrita.
    - La parte del texto que se genera como: "${data.time}" sera: color: "verde oscuro" y estara en negrita.
    - La parte del texto que se genera como: " - "(lo que separa cada dato) sera: color: "gris oscuro" y estara en negrita.
}
- Configura mi funcion para que: {
    - Se coloquen los estilos del <p> que me generaste arriba.
    - Que debajo de la linea de informacion que se genere este un separador, ej:
    [linea de informacion que se genera, (linea que contiene todos los datos, "[${data.ramal}]", "${data.chofer}", "${data.ubicacion}", "${data.time}".)]
    <div class="separador"></div>
    //Asi consecutivamente
}

Mi funcion es:
async function refrescarColectivos() {
    const listaDiv = document.getElementById("colectivos-lista");
    listaDiv.innerHTML = "Cargando...";
    try {
        const snapshot = await getDocs(collection(db, "ubication"));
        if (snapshot.empty) {
            listaDiv.innerHTML = "No hay colectivos circulando.";
            return;
        }
        listaDiv.innerHTML = "";
        snapshot.forEach(docSnap => {
            const data = docSnap.data();
            const linea = `[${data.ramal}] - ${data.chofer} - ${data.ubicacion} - ${data.time}`;
            const p = document.createElement("p");
            p.textContent = linea;
            p.classList.add("colectivo-linea");
            listaDiv.appendChild(p);
        });
    } catch (error) {
        console.error("Error al cargar colectivos:", error);
        listaDiv.innerHTML = "Error al cargar la información.";
    }
}
==============================
Modifica lo que sea necesario para hacer que: {
    1. Alla un select, sonde el chofer seleccione una de las siguientes opciones: {
        "Seleccione su sentido" (esta no se podra seleccionar),
        "IDA" (esta se podra seleccionar),
        "VUELTA" (esta se podra seleccionar).
    }
    2. Al guardar la ubicacion, se recolecte la opcion seleccionada en el SELECT y se guarde en la base de datos, si es la IDA o la vuelta.
    3. Se recolecte esa informacion para ponerse en la linea de informacion de un colectivo.
}
Lo que yo consiero que necesitaras es:
Menu del chofer: 
<div id="inicio" class="contenedor" style="display: none;">
        <div class="seccion">
            <h2>Datos del Recorrido</h2>
            <div class="campo">
                <label for="chofer">Chofer:</label>
                <input type="text" id="chofer" name="chofer" placeholder="ID de Discord del Chofer" required>
            </div>
            <form id="planilla-form" autocomplete="off">
                <div class="campo">
                    <button type="button" id="boton-ramal" class="boton-seleccion" onclick="abrirMenuRamales(); iniciarAlarma();">Indicar Ramal</button>
                </div>
                <div class="campo">
                    <button type="button" id="boton-interno" class="boton-seleccion" onclick="abrirMenuInternos()">Indicar Interno</button>
                </div>
            </div>
            <div class="seccion">
                <h2>Ubicación del Chofer</h2>
                <div id="panel-ubicaciones">
                    <div class="acciones">
                        <button type="button" onclick="guardarUbicacion('Areopuerto')">Areopuerto</button>
                        <button type="button" onclick="guardarUbicacion('Deposito Larga Distancia')">Deposito Larga Distancia</button>
                        <button type="button" onclick="guardarUbicacion('Deposito Urbano')">Deposito Urbano</button>
                        <button type="button" onclick="guardarUbicacion('Metrobus 2 Carriles')">Metrobus 2 Carriles</button>
                        <button type="button" onclick="guardarUbicacion('Metrobus 6 Carriles')">Metrobus 6 Carriles</button>
                        <button type="button" onclick="guardarUbicacion('Terminal Aguas de Oro')">Terminal Aguas de Oro</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Barrio')">Terminal de Barrio</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de La Cumbre')">Terminal de La Cumbre</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Los Altos')">Terminal de Los Altos</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Retiro')">Terminal de Retiro</button>
                    </div>
                </div>
            </div>
            <div class="seccion">
                <h2>Vueltas</h2>
                <div class="campo">
                    <label for="ida-cargar">Ida:</label>
                    <input type="text" id="ida-cargar" placeholder="13:00" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('ida-cargar')">⌚</button>
                </div>
                <div class="campo">
                    <label for="vuelta-cargar">Vuelta:</label>
                    <input type="text" id="vuelta-cargar" placeholder="13:10" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('vuelta-cargar')">⌚</button>
                </div>
                <div class="acciones">
                    <button type="button" onclick="cargarVuelta()">Cargar Vuelta</button>
                    <button type="button" onclick="invalidarVuelta()">Invalidar Vuelta</button>
                </div>
                <div class="campo">
                    <label for="planillas">Planillas realizadas:</label>
                    <input type="number" id="planillas" name="planillas" placeholder="##" min="0" step="1" required>
                </div>
            </div>
            <!-- Acciones -->
            <div class="seccion">
                <h2>Acciones</h2>
                <div class="acciones">
                    <button type="button" class="discord" onclick="enviarPlanilla()">Enviar Planilla</button>
                </div>
            </div>
        </form>
    </div>

Funcion que muestra los colectivos circulando:
async function refrescarColectivos() {
    const listaDiv = document.getElementById("colectivos-lista");
    listaDiv.innerHTML = "Cargando...";
    try {
        const snapshot = await getDocs(collection(db, "ubication"));
        if (snapshot.empty) {
            listaDiv.innerHTML = "No hay colectivos circulando.";
            return;
        }
        listaDiv.innerHTML = "";
        snapshot.forEach(docSnap => {
            const data = docSnap.data();
            const linea = `[${data.ramal}] - ${data.chofer} - ${data.ubicacion} - ${data.time}`;
            const p = document.createElement("p");
            p.textContent = linea;
            p.classList.add("colectivo-linea");
            p.style.color = "black";
            p.innerHTML = `
                <span style="color: #00BFFF; font-weight: bold;">[${data.ramal}]</span>
                <span style="color: white; font-weight: bold;"> - </span>
                <span style="color: #333333; font-weight: bold;"> - </span>
                <span style="color: #FF0000; font-weight: bold;">${data.chofer}</span>
                <span style="color: white; font-weight: bold;"> - </span>
                <span style="color: #333333; font-weight: bold;"> - </span>
                <span style="color: #32CD32; font-weight: bold;">${data.ubicacion}</span>
                <span style="color: white; font-weight: bold;"> - </span>
                <span style="color: #333333; font-weight: bold;"> - </span>
                <span style="color: #008000; font-weight: bold;">${data.time}</span>
            `;
            listaDiv.appendChild(p);
            listaDiv.appendChild(document.createElement("div"));
        });
    } catch (error) {
        console.error("Error al cargar colectivos:", error);
        listaDiv.innerHTML = "Error al cargar la información.";
    }
}
window.refrescarColectivos = refrescarColectivos;

La funcion que guarda la informacion de los Colectivos:
async function guardarUbicacion(ubicacion) {
    const chofer = document.getElementById('chofer').value.trim();
    const ramal = document.getElementById('boton-ramal').innerText.trim(); 
    if (!chofer || chofer === "Indicar Chofer") {
        alert('Debes indicar el chofer antes de guardar la ubicación.');
        return;
    }
    if (!ramal || ramal === "Indicar Ramal") {
        alert('Debes indicar el ramal antes de guardar la ubicación.');
        return;
    }
    const fecha = new Date();
    const horaFormato = `${fecha.getHours().toString().padStart(2,'0')}:` +
                        `${fecha.getMinutes().toString().padStart(2,'0')}`;
    try {
        await setDoc(doc(db, "ubication", chofer), {
            chofer: chofer,
            ubicacion: ubicacion,
            time: horaFormato,
            ramal: ramal
        });
        console.log(`✅ Ubicación "${ubicacion}" guardada para el chofer ${chofer}, ramal ${ramal}`);
        const webhookUrl = enlaces(); // Usa tu función/constante de webhook
        const embed = {
            title: "🚌 Nueva Ubicación Registrada",
            description: `El chofer @${chofer.replace('@', '')} ha guardado una nueva ubicación.\n\n` +
                         `📍 Ubicación: **${ubicacion}**\n` +
                         `🛣️ Ramal: **${ramal}**\n\n` +
                         `[Visualizar Últimas Ubicaciones de Recorridos Actuales](https://abelcraftok.github.io/GTG/ubication.html)`,
            color: 3447003,
            footer: { text: `📅 Horario: ${new Date().toLocaleString()}` }
        };
        await fetch(webhookUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ embeds: [embed] })
        });
        console.log("✅ Mensaje embed enviado a Discord");
    } catch (error) {
        console.error("❌ Error guardando ubicación o enviando embed:", error);
    }
}
window.guardarUbicacion = guardarUbicacion;