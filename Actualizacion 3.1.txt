Titulo: "Reformacion del Formato de la Planilla"
Mensaje: "Reformamos los datos y funciones de la pagina para qu se adapte al nuevo formato de Planillas."
Cambios: "
- Cambios en las funciones del chofer y sus pesta√±as.
- 
- 
"

Haz los cambios en las funciones y HTML: {
    Haz que las funciones JS, se adapten al nuevo formato de planilla.
    El nuevo formato es: //lo que esta entre "[]" es lo que ya estaba desde antes, lo que esta dentro de "{}" es lo nuevo que hay que agregar y lo que esta dentro de "**" es lo que ya estaba desde antes pero hay que cambiarle el lugar.
    "
    Chofer: [chofer]
    Interno: [interno]
    Recorrido: {recorrido}                     Linea: {ramal}

    IDA
    Salida: *lo que antes se marcaba como ida de la planilla.* //se renombrara a "ida1"
    Llegada: {ida2}

    Descanso: 

    VUELTA
    Salida: *lo que antes se marcaba como vuelta de la planilla.* //se renombrara a "vuelta1"
    Llegada: {vuelta2}
    
    Planillas Generales: [planilla] //se renombrara a "planillas1"
    Planillas Semanales: {planillas2}
    Planillas Mensuales: {planillas3}
    "
    Quiero que: {
        - Debajo del Boton que abre el menu para seleccionar el interno, quiero que alla un INPUT donde el usaurio no pueda escribir, aparecera informacion sobre el ramal que selecciono. Esa informacion puede variar dependiendo que ramal alla elegido, asi que te mostrare una tabla donde especifica: {"
            | RAMAL SELECIONADO | N¬∞ DE RECORRIDO ASIGNADO |
            |===================|==========================|
            |9                  |4                         |
            |348                |3                         |
            |373                |2                         |
            |570                |1                         |
            |===================|==========================|
        "}
        - En el <div class="campo"> donde se introduce los horarios de IDA y VUELTA. Agrega mas INPUTS para que quede asi: {"
            <h2>IDA</h2>
            INPUT: {se guarda como: "ida1" - Sera obligatorio completar}
            INPUT: {se guarda como: "ida2" - Sera obligatorio completar}
            <h2>Descansos</h2>
            INPUT: {se guarda como: "descanso" - Sera obligatorio completar}
            INPUT: {se guarda como: "descanso2" - NO sera obligatorio completar}
            <h2>VUELTA</h2>
            INPUT: {se guarda como: "vuelta1" - Sera obligatorio completar}
            INPUT: {se guarda como: "vuelta2" - Sera obligatorio completar}
        "}
        - Tambien re-configura la funcion que envia la planilla a DC y a la base de datos para que adapte este nuevo formato.
        - Tambien re-configura la funcion que obtiene las planillas de la base de datos para que adapte este nuevo formato.
        - Tambien agrega un alert al utilizar algun boton que envie la ubicacion, muestre: "Ubicacion enviada".
    }
    Recursos que creo que son los que necesitas:
    Funcion en donde el chofer coloca los datos:
    <div id="inicio" class="contenedor" style="display: none;">
        <div class="seccion">
            <h2>Datos del Recorrido</h2>
            <div class="campo">
                <label for="chofer">Chofer:</label>
                <input type="text" id="chofer" name="chofer" placeholder="ID de Discord del Chofer" required>
            </div>
            <form id="planilla-form" autocomplete="off">
                <div class="campo">
                    <button type="button" id="boton-ramal" class="boton-seleccion" onclick="abrirMenuRamales(); iniciarAlarma();">Indicar Ramal</button>
                </div>
                <div class="campo">
                    <button type="button" id="boton-interno" class="boton-seleccion" onclick="abrirMenuInternos()">Indicar Interno</button>
                </div>
            </div>
            <div class="seccion">
                <div class="campo">
                    <label for="sentido">Sentido:</label>
                    <select id="sentido" required>
                        <option value="" disabled selected>Seleccione su sentido</option>
                        <option value="IDA">IDA</option>
                        <option value="VUELTA">VUELTA</option>
                    </select>
                </div>
            </div>
            <div class="seccion">
                <h2>Ubicaci√≥n del Chofer</h2>
                <div id="panel-ubicaciones">
                    <div class="acciones">
                        <h2>Ciudad</h2>
                        <button type="button" onclick="guardarUbicacion('Av. Principal')">Av. Principal</button>
                        <button type="button" onclick="guardarUbicacion('Centro')">Centro</button>
                        <h2>Depositos</h2>
                        <button type="button" onclick="guardarUbicacion('Deposito FONO BUS')">Deposito FONO BUS</button>
                        <button type="button" onclick="guardarUbicacion('Deposito General Tomas Guido')">Deposito General Tomas Guido</button>
                        <button type="button" onclick="guardarUbicacion('Deposito Larga Distancia')">Deposito Larga Distancia</button>
                        <button type="button" onclick="guardarUbicacion('Deposito Urbano')">Deposito Urbano</button>
                        <h2>Metrobuses</h2>
                        <button type="button" onclick="guardarUbicacion('Metrobus 2 Carriles')">Metrobus 2 Carriles</button>
                        <button type="button" onclick="guardarUbicacion('Metrobus 6 Carriles')">Metrobus 6 Carriles</button>
                        <h2>Lugares Publicos</h2>
                        <button type="button" onclick="guardarUbicacion('Patio de Eventos')">Patio de Eventos</button>
                        <button type="button" onclick="guardarUbicacion('Plaza La Cumbre')">Plaza La Cumbre</button>
                        <h2>Terminales</h2>
                        <button type="button" onclick="guardarUbicacion('Terminal Aguas de Oro')">Terminal Aguas de Oro</button>
                        <button type="button" onclick="guardarUbicacion('Terminal del Areopuerto')">Terminal del Areopuerto</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Barrio')">Terminal de Barrio</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de La Cumbre')">Terminal de La Cumbre</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Los Altos')">Terminal de Los Altos</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Minibuses')">Terminal de Minibuses</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Omnibus Villa')">Terminal de Omnibus Villa</button>
                        <button type="button" onclick="guardarUbicacion('Terminal de Retiro')">Terminal de Retiro</button>
                    </div>
                </div>
            </div>
            <div class="seccion">
                <h2>Vueltas</h2>
                <div class="campo">
                    <label for="ida-cargar">Ida:</label>
                    <input type="text" id="ida-cargar" placeholder="13:00" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('ida-cargar')">‚åö</button>
                </div>
                <div class="campo">
                    <label for="vuelta-cargar">Vuelta:</label>
                    <input type="text" id="vuelta-cargar" placeholder="13:10" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('vuelta-cargar')">‚åö</button>
                </div>
                <div class="acciones">
                    <button type="button" onclick="cargarVuelta()">Cargar Vuelta</button>
                    <button type="button" onclick="invalidarVuelta()">Invalidar Vuelta</button>
                </div>
                <div class="campo">
                    <label for="planillas">Planillas realizadas:</label>
                    <input type="number" id="planillas" name="planillas" placeholder="##" min="0" step="1" required>
                </div>
            </div>
            <!-- Acciones -->
            <div class="seccion">
                <h2>Acciones</h2>
                <div class="acciones">
                    <button type="button" class="discord" onclick="enviarPlanilla()">Enviar Planilla</button>
                </div>
            </div>
        </form>
    </div>

    Funcion que envia el embled de una nueva planilla:
    function enviarMensaje(planillaData) {
    const inspectores = inspectoresActiven();

    let vueltasTexto = "";

    if (Array.isArray(planillaData.vueltas) && planillaData.vueltas.length > 0) {
        vueltasTexto = "**Vueltas:**\n";
        planillaData.vueltas.forEach((v, i) => {
            vueltasTexto += `‚Ä¢ Vuelta ${i + 1}: ${v.hora || 'sin hora'} - ${v.comentario || 'sin comentario'}\n`;
        });
    } else {
        vueltasTexto = "Sin vueltas registradas.";
    }

    const embed = {
        title: "üìã Nueva Planilla Cargada",
        description: `Hola Inspectores queridos, soy el BOT encargado de avisarle cuando alla una nueva planilla y recien se acaba de cargar una nueva, asi que lo antes posible traten de revisarla... Aqui se las dejo ‚ù§Ô∏è\n\n**Chofer:** ${planillaData.chofer}\n**Ramal:** ${planillaData.ramal}\n**Interno:** ${planillaData.interno}\n**Planillas Realizadas:** ${planillaData.planillasCount}\n\n${vueltasTexto}\n\n**C√≥digo de Planilla:** ${planillaData.codigoPlanilla} | ${new Date().toLocaleString()}\n\n[üëâ Aceptar/Rechazar Planilla](https://abelcraftok.github.io/GTG/planilla/@${planillaData.chofer.replace('@', '')}.html)`,
        color: 3066993,
        footer: {
            text: `üìÖ Enviada: ${new Date().toLocaleString()}`
        }
    };

    const payload = { embeds: [embed] };

    fetch(inspectores, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    })
    .then(response => {
        if (!response.ok) {
            console.error("‚ùå Error al enviar mensaje:", response.statusText);
        } else {
            console.log("‚úÖ Mensaje embed enviado a Discord");
            redirigirSegunRol();
        }
    })
    .catch(error => {
        console.error("‚ùå Error en la solicitud al enviar embed:", error);
    });
}
async function guardarPlanilla() {
    alert("Enviando planilla, por favor espere...")
    const codigoPlanilla = generarCodigoUnico();

    const choferElem = document.getElementById('chofer');
    const planillasElem = document.getElementById('planillas');

    if (!choferElem || !planillasElem) {
        alert("‚ùå No se encontraron algunos campos obligatorios en el DOM (chofer o planillas).");
        return;
    }

    const choferInput = choferElem.value.trim();
    const planillasCount = planillasElem.value.trim();

    if (!ramalSeleccionado || !internoSeleccionado || !choferInput || !planillasCount || vueltas.length === 0) {
        alert("Por favor, complete todos los datos (Chofer, Ramal, Interno, Planillas y al menos una vuelta v√°lida).");
        return;
    }

    const vueltasValidas = vueltas.filter(v => !v.invalidada);
    if (vueltasValidas.length === 0) {
        alert("Debe haber al menos una vuelta v√°lida cargada.");
        return;
    }

    try {
        // Verificar si el chofer est√° registrado
        const choferesSnapshot = await getDocs(collection(db, "choferes"));
        let choferEncontrado = false;

        choferesSnapshot.forEach(docu => {
            const data = docu.data();
            if (data.chofer === `${choferInput}`) {
                choferEncontrado = true;
            }
        });

        if (!choferEncontrado) {
            alert(`El ID de Discord "${choferInput}" no est√° registrado como chofer. Verifica lo escrito.`);
            return;
        }

        const nuevaPlanilla = {
            chofer: choferInput,
            ramal: ramalSeleccionado,
            interno: internoSeleccionado,
            planillasCount: planillasCount,
            vueltas: [...vueltas],
            estado: 'pendiente',
            timestamp: new Date(),
            codigoPlanilla: codigoPlanilla,
        };
        
        await addDoc(collection(db, "planillas"), nuevaPlanilla);
        console.log("‚úÖ Planilla registrada");

        enviarMensaje(nuevaPlanilla);  // üëà Mensaje con embed a Discord
        limpiarCampos()

    } catch (error) {
        console.error("Error al guardar/verificar la planilla:", error);
        alert("‚ùå Ocurri√≥ un error al guardar la planilla.");
    }
}
window.guardarPlanilla = guardarPlanilla;

window.obtenerPlanillas = async function obtenerPlanillas() {
  alert("Obteniendo planillas, por favor espere...")
  const contenedor = document.getElementById('resumen-vueltas');
  if (!contenedor) {
    console.error("El elemento 'resumen-vueltas' no se encontr√≥.");
    return;
  }
  contenedor.innerHTML = '';

  try {
    const querySnapshot = await getDocs(collection(db, "planillas"));
    let planillas = [];
    querySnapshot.forEach((docu) => {
      planillas.push({ id: docu.id, ...docu.data() });
    });

    if (planillas.length === 0) {
      const msg = '<div class="texto-rojo">No se han encontrado planillas recientes.</div>';
      contenedor.innerHTML = msg;
      return;
    }

    planillas.forEach(planilla => {
      let vueltasHtml = '';
      if (Array.isArray(planilla.vueltas)) {
        planilla.vueltas.forEach((v, idx) => {
          vueltasHtml += `<div>Vuelta ${idx + 1}: Ida: ${v.ida} | Vuelta: ${v.vuelta} ${v.invalidada ? '<em>(Invalidada)</em>' : ''}</div>`;
        });
      }

      const planillaHTML = `
        <div class="burbuja">
          <strong>Chofer:</strong> ${planilla.chofer}<br>
          <strong>Ramal:</strong> ${planilla.ramal}<br>
          <strong>Interno:</strong> ${planilla.interno}<br>
          <strong>Planillas Realizadas:</strong> ${planilla.planillasCount}<br>
          ${vueltasHtml}
          <strong>Codigo de Planilla:</strong> ${planilla.codigoPlanilla} | 
          ${planilla.timestamp instanceof Date
            ? planilla.timestamp.toLocaleString()
            : (planilla.timestamp?.toDate
              ? planilla.timestamp.toDate().toLocaleString()
              : planilla.timestamp)}<br>
          <strong>Estado:</strong> ${planilla.estado}<br>
          <button onclick="aceptarPlanilla('${planilla.id}')" style="display: block; margin-top: 5px; color: white; background-color: #8bc34a; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">ACEPTAR</button>
          <button onclick="denegarPlanilla('${planilla.id}')" style="display: block; margin-top: 5px; color: white; background-color: #c0392b; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer;">RECHAZAR</button>
        </div>
        <div class="separador"></div>
      `;

      contenedor.innerHTML += planillaHTML;
    });
  } catch (error) {
    console.error("Error al obtener planillas:", error);
  }
};

    funcion que acepta una planilla:
window.aceptarPlanilla = async function aceptarPlanilla(id) {
    alert("Aceptando planilla, por favor espere...")
    try {
        // 1. Buscar la planilla en 'planillas'
        const planillaRef = doc(db, "planillas", id);
        const planillaSnap = await getDoc(planillaRef);
        if (!planillaSnap.exists()) {
            alert("No se encontr√≥ la planilla.");
            return;
        }
        const planillaData = { id: planillaSnap.id, ...planillaSnap.data() };
        // 2. Modificar estado y mover a historialPlanillas
        planillaData.estado = "aprobado";
        await addDoc(collection(db, "historialPlanillas"), planillaData);
        // 3. Eliminar de planillas
        await deleteDoc(planillaRef);
        // 4. Notificar a Discord
        let vueltasTexto = "";
        if (Array.isArray(planillaData.vueltas)) {
            planillaData.vueltas.forEach((v, idx) => {
                vueltasTexto += `Vuelta ${idx + 1}: Ida: ${v.ida} | Vuelta: ${v.vuelta} ${v.invalidada ? '(Invalidada)' : ''}\n`;
            });
        }
        const embed = {
            title: "Planilla Aprobada",
            description: `**Chofer:** ${planillaData.chofer}\n**Ramal:** ${planillaData.ramal}\n**Interno:** ${planillaData.interno}\n**Planillas Realizadas:** ${planillaData.planillasCount}\n${vueltasTexto}\n**Codigo de Planilla: ${planillaData.codigoPlanilla} | ${(planillaData.timestamp instanceof Date ? planillaData.timestamp.toLocaleString() : (planillaData.timestamp?.toDate ? planillaData.timestamp.toDate().toLocaleString() : planillaData.timestamp))}**`,
            color: 3066993,
            footer: { text: new Date().toLocaleString() }
        };
        await fetch(WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] })
        });
        alert("Planilla aprobada y movida a historial.");
        obtenerPlanillas();
    } catch (error) {
        alert("Error al aprobar la planilla.");
        console.error(error);
    }
}

funcion que rechaza una planilla:window.denegarPlanilla = async function denegarPlanilla(id) {
    alert("Rechazando planilla, por favor espere...")
    try {
        // 1. Buscar la planilla en 'planillas'
        const planillaRef = doc(db, "planillas", id);
        const planillaSnap = await getDoc(planillaRef);
        if (!planillaSnap.exists()) {
            alert("No se encontr√≥ la planilla.");
            return;
        }
        const planillaData = { id: planillaSnap.id, ...planillaSnap.data() };
        // 2. Modificar estado y mover a historialPlanillas
        planillaData.estado = "rechazado";
        await addDoc(collection(db, "historialPlanillas"), planillaData);
        // 3. Eliminar de planillas
        await deleteDoc(planillaRef);
        // 4. Notificar a Discord
        let vueltasTexto = "";
        if (Array.isArray(planillaData.vueltas)) {
            planillaData.vueltas.forEach((v, idx) => {
                vueltasTexto += `Vuelta ${idx + 1}: Ida: ${v.ida} | Vuelta: ${v.vuelta} ${v.invalidada ? '(Invalidada)' : ''}\n`;
            });
        }
        const embed = {
            title: "Planilla Rechazada",
            description: `**Chofer:** ${planillaData.chofer}\n**Ramal:** ${planillaData.ramal}\n**Interno:** ${planillaData.interno}\n**Planillas Realizadas:** ${planillaData.planillasCount}\n${vueltasTexto}\n**Codigo de Planilla: ${planillaData.codigoPlanilla} | ${(planillaData.timestamp instanceof Date ? planillaData.timestamp.toLocaleString() : (planillaData.timestamp?.toDate ? planillaData.timestamp.toDate().toLocaleString() : planillaData.timestamp))}**`,
            color: 15158332,
            footer: { text: new Date().toLocaleString() }
        };
        await fetch(WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] })
        });
        alert("Planilla rechazada y movida a historial.");
        obtenerPlanillas();
    } catch (error) {
        alert("Error al rechazar la planilla.");
        console.error(error);
    }
}
}
funcion que muestra el historial de las planillas:
function renderizarHistorial(planillas) {
    const contenedor = document.getElementById('contenedor-historial-planillas');
    contenedor.innerHTML = '';

    if (planillas.length === 0) {
        contenedor.innerHTML = '<div class="texto-rojo">No hay historial de planillas.</div>';
        return;
    }

    planillas.forEach(planilla => {
        let vueltasHtml = '';
        if (Array.isArray(planilla.vueltas)) {
            planilla.vueltas.forEach((v, idx) => {
                vueltasHtml += `<div>Vuelta ${idx + 1}: Ida: ${v.ida} | Vuelta: ${v.vuelta} ${v.invalidada ? '<em>(Invalidada)</em>' : ''}</div>`;
            });
        }

        contenedor.innerHTML += `
            <div class="burbuja">
                <strong>Chofer:</strong> ${planilla.chofer}<br>
                <strong>Ramal:</strong> ${planilla.ramal}<br>
                <strong>Interno:</strong> ${planilla.interno}<br>
                <strong>Planillas Realizadas:</strong> ${planilla.planillasCount}<br>
                ${vueltasHtml}
                <strong>Codigo de Planilla:</strong> ${planilla.codigoPlanilla}<br>
                <strong>Fecha:</strong> ${(planilla.timestamp?.toDate ? planilla.timestamp.toDate().toLocaleString() : planilla.timestamp)}<br>
                <strong>Estado:</strong> ${planilla.estado}
            </div>
            <div class="separador"></div>
        `;
    });
}

funcion que guarda la ubicacion (para que le agregues alerts y tambien le corrijas que enten bien las ID de los objetos):
async function guardarUbicacion(ubicacion) {
    const chofer = document.getElementById('chofer').value.trim();
    const ramal = document.getElementById('boton-ramal').innerText.trim();
    const sentido = document.getElementById('sentido').value;
    if (!chofer || chofer === "Indicar Chofer") {
        alert('Debes indicar el chofer antes de guardar la ubicaci√≥n.');
        return;
    }
    if (!ramal || ramal === "Indicar Ramal") {
        alert('Debes indicar el ramal antes de guardar la ubicaci√≥n.');
        return;
    }
    if (!sentido) {
        alert('Debes seleccionar el sentido (IDA o VUELTA).');
        return;
    }
    const fecha = new Date();
    const horaFormato = `${fecha.getHours().toString().padStart(2,'0')}:` +
                        `${fecha.getMinutes().toString().padStart(2,'0')}`;
    try {
        await setDoc(doc(db, "ubication", chofer), {
            chofer: chofer,
            ubicacion: ubicacion,
            time: horaFormato,
            ramal: ramal,
            sentido: sentido
        });
        console.log(`‚úÖ Ubicaci√≥n "${ubicacion}" guardada para ${chofer}, ramal ${ramal}, sentido ${sentido}`);
        const webhookUrl = enlaces();
        const embed = {
            title: "üöå Nueva Ubicaci√≥n Registrada",
            description: `El chofer @${chofer.replace('@', '')} ha guardado una nueva ubicaci√≥n.\n\n` +
                         `üìç Ubicaci√≥n: **${ubicacion}**\n` +
                         `üõ£Ô∏è Ramal: **${ramal}**\n` +
                         `‚û°Ô∏è Sentido: **${sentido}**\n\n` +
                         `[Visualizar √öltimas Ubicaciones de Recorridos Actuales](https://abelcraftok.github.io/GTG/ubication.html)`,
            color: 3447003,
            footer: { text: `üìÖ Horario: ${new Date().toLocaleString()}` }
        };
        await fetch(webhookUrl, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ embeds: [embed] })
        });
        console.log("‚úÖ Mensaje embed enviado a Discord");
    } catch (error) {
        console.error("‚ùå Error guardando ubicaci√≥n o enviando embed:", error);
    }
}
window.guardarUbicacion = guardarUbicacion;