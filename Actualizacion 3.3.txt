Titulo: "Reformacion del Formato de la Planilla"
Mensaje: "Reformamos los datos y funciones de la pagina para qu se adapte al nuevo formato de Planillas, esto fue una re-configuracion de la Version 3.2, ya que en esa version, no permitia poner mas de 1 vuelta por planilla."
Cambios: "
- Cambios en las funciones del chofer y sus pestañas.
- Cambios en la funcion que avisa sobre una nueva ubicacion.
- Cambios en el asset: "ubication.html".
- Cambios en los assets dentro de: "/GTG/planilla/"
"

Cambios en las funciones del chofer y sus pestañas: {
    Agrega una funcion para mi pestaña (la del chofer) donde la funcion haga lo siguiente (guarda las vueltas generales):
    - Recolecte lo valores de los INPUTS: {
        "ida1",
        "ida1",
        "descanso",
        "descanso2",
        "vuelta1",
        "vuelta2".
    }
    - Luego de recolectarlos, que se guarde una vuelta con la informacion recolectada.
    - Y por ultimo se limpien los campos al haber guardado correctamente la vuelta.

    Genera un boton que ejecute la funcion que creaste para que guarde las vueltas generales
    Genera un boton que abra un menu, donde el usaurio pueda ver las vueltas generales que aah cargado.

    Modifica mis funciones para que se adapten a este nuevo formato:
    //RECUERDA QUE NO SE ME PUEDE PERDER NINGUN TIPO DE OBJETO/ELEMNETO CUANDO ME GENERES LOS CODIGOS FINALES DE LAS FUNCIONES.
    Pestaña donde el chofer configura todo (RECUERDA QUE NO SE ME PUEDE PERDER NINGUN TIPO DE OBJETO/ELEMNETO CUANDO ME GENERES LOS CODIGOS FINALES DE LAS FUNCIONES.):
    <div id="inicio" class="contenedor" style="display: none;">
        <div class="seccion">
            <h2>Datos del Recorrido</h2>
            <div class="campo">
                <label for="chofer">Chofer:</label>
                <input type="text" id="chofer" name="chofer" placeholder="ID de Discord del Chofer" required>
            </div>
            <form id="planilla-form" autocomplete="off">
                <div class="campo">
                    <button type="button" id="boton-ramal" class="boton-seleccion" onclick="abrirMenuRamales(); iniciarAlarma();">Indicar Ramal</button>
                </div>
                <div class="campo">
                    <button type="button" id="boton-interno" class="boton-seleccion" onclick="abrirMenuInternos()">Indicar Interno</button>
                </div>
                <div class="campo">
                    <label for="recorrido-info">Recorrido:</label>
                    <input type="text" id="recorrido-info" readonly>
                </div>
            </div>
            <div class="seccion">
                <div class="campo">
                    <label for="sentido">Sentido:</label>
                    <select id="sentido" required>
                        <option value="" disabled selected>Seleccione su sentido</option>
                        <option value="IDA">IDA</option>
                        <option value="VUELTA">VUELTA</option>
                    </select>
                </div>
            </div>
            <div class="seccion">
                <h1>Ubicación del Chofer</h1>
                <div id="panel-ubicaciones">
                    <div class="seccion">
                        <h2>Ciudad</h2>
                        <div class="separador"></div>
                        <div class="acciones">
                            <button type="button" onclick="guardarUbicacion('Av. Principal')">Av. Principal</button>
                            <button type="button" onclick="guardarUbicacion('Centro')">Centro</button>
                        </div>
                    </div>
                    <div class="seccion">
                        <h2>Depositos</h2>
                        <div class="separador"></div>
                        <div class="acciones">
                            <button type="button" onclick="guardarUbicacion('Deposito FONO BUS')">Deposito FONO BUS</button>
                            <button type="button" onclick="guardarUbicacion('Deposito General Tomas Guido')">Deposito General Tomas Guido</button>
                            <button type="button" onclick="guardarUbicacion('Deposito Larga Distancia')">Deposito Larga Distancia</button>
                            <button type="button" onclick="guardarUbicacion('Deposito Urbano')">Deposito Urbano</button>
                        </div>
                    </div>
                    <div class="seccion">
                        <h2>Metrobuses</h2>
                        <div class="separador"></div>
                        <div class="acciones">
                            <button type="button" onclick="guardarUbicacion('Metrobus 2 Carriles')">Metrobus 2 Carriles</button>
                            <button type="button" onclick="guardarUbicacion('Metrobus 6 Carriles')">Metrobus 6 Carriles</button>
                        </div>
                    </div>
                    <div class="seccion">
                        <h2>Lugares Publicos</h2>
                        <div class="separador"></div>
                        <div class="acciones">
                            <button type="button" onclick="guardarUbicacion('Patio de Eventos')">Patio de Eventos</button>
                            <button type="button" onclick="guardarUbicacion('Plaza La Cumbre')">Plaza La Cumbre</button>
                        </div>
                    </div>
                    <div class="seccion">
                        <h2>Terminales</h2>
                        <div class="separador"></div>
                        <div class="acciones">
                            <button type="button" onclick="guardarUbicacion('Terminal Aguas de Oro')">Terminal Aguas de Oro</button>
                            <button type="button" onclick="guardarUbicacion('Terminal del Areopuerto')">Terminal del Areopuerto</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de Barrio')">Terminal de Barrio</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de La Cumbre')">Terminal de La Cumbre</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de Los Altos')">Terminal de Los Altos</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de Minibuses')">Terminal de Minibuses</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de Omnibus Villa')">Terminal de Omnibus Villa</button>
                            <button type="button" onclick="guardarUbicacion('Terminal de Retiro')">Terminal de Retiro</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="seccion">
                <h2>IDA</h2>
                <div class="campo">
                    <label for="ida1">Salida:</label>
                    <input type="text" id="ida1" name="ida1" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('ida1')">⌚</button>
                </div>
                <div class="campo">
                    <label for="ida2">Llegada:</label>
                    <input type="text" id="ida2" name="ida2" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('ida2')">⌚</button>
                </div>
            </div>
            <div class="seccion">
                <h2>Descansos</h2>
                <div class="campo">
                    <label for="descanso">Descanso 1:</label>
                    <input type="text" id="descanso" name="descanso" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('descanso')">⌚</button>
                </div>
                <div class="campo">
                    <label for="descanso2">Descanso 2 (opcional):</label>
                    <input type="text" id="descanso2" name="descanso2" placeholder="HH:MM" pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('descanso2')">⌚</button>
                </div>
            </div>
            <div class="seccion">
                <h2>VUELTA</h2>
                <div class="campo">
                    <label for="vuelta1">Salida:</label>
                    <input type="text" id="vuelta1" name="vuelta1" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('vuelta1')">⌚</button>
                </div>
                <div class="campo">
                    <label for="vuelta2">Llegada:</label>
                    <input type="text" id="vuelta2" name="vuelta2" placeholder="HH:MM" required pattern="^([01]\d|2[0-3]):([0-5]\d)$">
                    <button type="button" class="boton-mini" onclick="horaActual('vuelta2')">⌚</button>
                </div>
            </div>
            <div class="seccion">
                <div class="campo">
                    <label for="planillas1">Planillas Generales:</label>
                    <input type="number" id="planillas1" name="planillas1" placeholder="##" min="0" step="1" required>
                </div>
                <div class="campo">
                    <label for="planillas2">Planillas Semanales:</label>
                    <input type="number" id="planillas2" name="planillas2" placeholder="##" min="0" step="1">
                </div>
                <div class="campo">
                    <label for="planillas3">Planillas Mensuales:</label>
                    <input type="number" id="planillas3" name="planillas3" placeholder="##" min="0" step="1">
                </div>
            </div>
            <div class="seccion">
                <h2>Acciones</h2>
                <div class="acciones">
                    <button type="button" class="discord" onclick="guardarPlanilla()">Enviar Planilla</button>
                </div>
            </div>
        </form>
    </div>
    Funcion que guarda la planilla (aqui configuras para que no obtenga los valores de los inputs, si no de donde se colocaron las vueltas generales):
    async function guardarPlanilla() {
    alert("Enviando planilla, por favor espere...");
    const codigoPlanilla = generarCodigoUnico();
    const chofer = document.getElementById('chofer').value.trim();
    const planillas1 = document.getElementById('planillas1').value.trim();
    const planillas2 = document.getElementById('planillas2').value.trim();
    const planillas3 = document.getElementById('planillas3').value.trim();
    const ida1 = document.getElementById('ida1').value.trim();
    const ida2 = document.getElementById('ida2').value.trim();
    const descanso = document.getElementById('descanso').value.trim();
    const descanso2 = document.getElementById('descanso2').value.trim();
    const vuelta1 = document.getElementById('vuelta1').value.trim();
    const vuelta2 = document.getElementById('vuelta2').value.trim();
    if (!chofer || !ramalSeleccionado || !internoSeleccionado || !planillas1 || !ida1 || !ida2 || !descanso || !vuelta1 || !vuelta2) {
        alert("⚠️ Faltan campos obligatorios");
        return;
    }
    try {
        const nuevaPlanilla = {
            chofer,
            interno: internoSeleccionado,
            ramal: ramalSeleccionado,
            recorrido: document.getElementById('recorrido-info').value,
            ida1,
            ida2,
            descanso,
            descanso2: descanso2 || null,
            vuelta1,
            vuelta2,
            planillas1,
            planillas2: planillas2 || 0,
            planillas3: planillas3 || 0,
            estado: "pendiente",
            timestamp: new Date(),
            codigoPlanilla
        };
        await addDoc(collection(db, "planillas"), nuevaPlanilla);
        console.log("✅ Planilla registrada");
        enviarMensaje(nuevaPlanilla);
        limpiarCampos();
    } catch (error) {
        console.error("Error al guardar planilla:", error);
        alert("❌ Error al guardar planilla.");
    }
}
window.guardarPlanilla = guardarPlanilla;
    Funcion que envia un Embled avisando de la nueva planilla:
    function enviarMensaje(planillaData) {
    const inspectores = inspectoresActiven();
    let descansosTexto = `• Descanso 1: ${planillaData.descanso || 'sin dato'}\n`;
    if (planillaData.descanso2) {
        descansosTexto += `• Descanso 2: ${planillaData.descanso2}\n`;
    }
    const embed = {
        title: "📋 Nueva Planilla Cargada",
        description: 
            `Hola Inspectores, se acaba de cargar una nueva planilla 🚍\n\n` +
            `**Chofer:** ${planillaData.chofer}\n` +
            `**Interno:** ${planillaData.interno}\n` +
            `**Recorrido:** ${planillaData.recorrido}   |   **Linea:** ${planillaData.ramal}\n\n` +

            `__**IDA**__\n` +
            `• Salida: ${planillaData.ida1 || 'sin dato'}\n` +
            `• Llegada: ${planillaData.ida2 || 'sin dato'}\n\n` +

            `__**Descansos**__\n${descansosTexto}\n` +

            `__**VUELTA**__\n` +
            `• Salida: ${planillaData.vuelta1 || 'sin dato'}\n` +
            `• Llegada: ${planillaData.vuelta2 || 'sin dato'}\n\n` +

            `__**Planillas**__\n` +
            `• Generales: ${planillaData.planillas1 || 0}\n` +
            `• Semanales: ${planillaData.planillas2 || 0}\n` +
            `• Mensuales: ${planillaData.planillas3 || 0}\n\n` +

            `**Código de Planilla:** ${planillaData.codigoPlanilla}\n` +
            `📅 Enviada: ${new Date().toLocaleString()}\n\n` +
            `[👉 Aceptar/Rechazar Planilla](https://abelcraftok.github.io/GTG/planilla/@${planillaData.chofer.replace('@', '')}.html)`,
        color: 3066993,
        footer: {
            text: `📅 Registrada: ${new Date().toLocaleString()}`
        }
    };
    const payload = { embeds: [embed] };
    fetch(inspectores, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload)
    })
    .then(response => {
        if (!response.ok) {
            console.error("❌ Error al enviar mensaje:", response.statusText);
        } else {
            console.log("✅ Mensaje embed enviado a Discord");
            redirigirSegunRol();
        }
    })
    .catch(error => {
        console.error("❌ Error en la solicitud al enviar embed:", error);
    });
}
    Funcion que acepta las planillas:
    window.aceptarPlanilla = async function aceptarPlanilla(id) {
    alert("Aceptando planilla, por favor espere...");
    try {
        const planillaRef = doc(db, "planillas", id);
        const planillaSnap = await getDoc(planillaRef);
        if (!planillaSnap.exists()) {
            alert("No se encontró la planilla.");
            return;
        }

        const planillaData = { id: planillaSnap.id, ...planillaSnap.data() };
        planillaData.estado = "aprobado";

        // Mover a historialPlanillas
        await addDoc(collection(db, "historialPlanillas"), planillaData);
        await deleteDoc(planillaRef);

        // Construir texto de vueltas
        const vueltasTexto = `
IDA:
  Salida: ${planillaData.ida1 || '-'}
  Llegada: ${planillaData.ida2 || '-'}
VUELTA:
  Salida: ${planillaData.vuelta1 || '-'}
  Llegada: ${planillaData.vuelta2 || '-'}
`;

        const embed = {
            title: "Planilla Aprobada",
            description: `**Chofer:** ${planillaData.chofer}
**Ramal:** ${planillaData.ramal}
**Interno:** ${planillaData.interno}
**Recorrido:** ${planillaData.recorrido}
**Planillas Generales:** ${planillaData.planillas1}
**Planillas Semanales:** ${planillaData.planillas2}
**Planillas Diarias:** ${planillaData.planillas3}
${vueltasTexto}
**Codigo de Planilla:** ${planillaData.codigoPlanilla} | ${(planillaData.timestamp instanceof Date ? planillaData.timestamp.toLocaleString() : (planillaData.timestamp?.toDate ? planillaData.timestamp.toDate().toLocaleString() : planillaData.timestamp))}
`,
            color: 3066993,
            footer: { text: new Date().toLocaleString() }
        };

        await fetch(WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] })
        });

        alert("Planilla aprobada y movida a historial.");
        obtenerPlanillas();
    } catch (error) {
        alert("Error al aprobar la planilla.");
        console.error(error);
    }
}
    funcion que rehcaza las planillas:
window.denegarPlanilla = async function denegarPlanilla(id) {
    alert("Rechazando planilla, por favor espere...");
    try {
        const planillaRef = doc(db, "planillas", id);
        const planillaSnap = await getDoc(planillaRef);
        if (!planillaSnap.exists()) {
            alert("No se encontró la planilla.");
            return;
        }

        const planillaData = { id: planillaSnap.id, ...planillaSnap.data() };
        planillaData.estado = "rechazado";

        await addDoc(collection(db, "historialPlanillas"), planillaData);
        await deleteDoc(planillaRef);

        const vueltasTexto = `
IDA:
  Salida: ${planillaData.ida1 || '-'}
  Llegada: ${planillaData.ida2 || '-'}
VUELTA:
  Salida: ${planillaData.vuelta1 || '-'}
  Llegada: ${planillaData.vuelta2 || '-'}
`;

        const embed = {
            title: "Planilla Rechazada",
            description: `**Chofer:** ${planillaData.chofer}
**Ramal:** ${planillaData.ramal}
**Interno:** ${planillaData.interno}
**Recorrido:** ${planillaData.recorrido}
**Planillas Generales:** ${planillaData.planillas1}
**Planillas Semanales:** ${planillaData.planillas2}
**Planillas Diarias:** ${planillaData.planillas3}
${vueltasTexto}
**Codigo de Planilla:** ${planillaData.codigoPlanilla} | ${(planillaData.timestamp instanceof Date ? planillaData.timestamp.toLocaleString() : (planillaData.timestamp?.toDate ? planillaData.timestamp.toDate().toLocaleString() : planillaData.timestamp))}
`,
            color: 15158332,
            footer: { text: new Date().toLocaleString() }
        };

        await fetch(WEBHOOK_URL, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ embeds: [embed] })
        });

        alert("Planilla rechazada y movida a historial.");
        obtenerPlanillas();
    } catch (error) {
        alert("Error al rechazar la planilla.");
        console.error(error);
    }
}
funcion que obtiene las planillas:
window.obtenerPlanillas = async function obtenerPlanillas() {
    alert("Obteniendo planillas, por favor espere...");
    const contenedor = document.getElementById('resumen-vueltas');
    if (!contenedor) return;

    contenedor.innerHTML = '';
    try {
        const querySnapshot = await getDocs(collection(db, "planillas"));
        let planillas = [];
        querySnapshot.forEach(docu => planillas.push({ id: docu.id, ...docu.data() }));

        if (planillas.length === 0) {
            contenedor.innerHTML = '<div class="texto-rojo">No se han encontrado planillas recientes.</div>';
            return;
        }

        planillas.forEach(planilla => {
            const planillaHTML = `
                <div class="burbuja">
                    <strong>Chofer:</strong> ${planilla.chofer}<br>
                    <strong>Interno:</strong> ${planilla.interno}<br>
                    <strong>Recorrido:</strong> ${planilla.recorrido} | <strong>Linea:</strong> ${planilla.ramal}<br>
                    <h3>IDA</h3>
                    Salida: ${planilla.ida1} | Llegada: ${planilla.ida2}<br>
                    <h3>Descansos</h3>
                    ${planilla.descanso} ${planilla.descanso2 ? "| " + planilla.descanso2 : ""}<br>
                    <h3>VUELTA</h3>
                    Salida: ${planilla.vuelta1} | Llegada: ${planilla.vuelta2}<br>
                    <strong>Planillas Generales:</strong> ${planilla.planillas1}<br>
                    <strong>Planillas Semanales:</strong> ${planilla.planillas2}<br>
                    <strong>Planillas Mensuales:</strong> ${planilla.planillas3}<br>
                    <strong>Codigo:</strong> ${planilla.codigoPlanilla} |
                    ${planilla.timestamp?.toDate ? planilla.timestamp.toDate().toLocaleString() : planilla.timestamp}<br>
                    <strong>Estado:</strong> ${planilla.estado}<br>
                    <button onclick="aceptarPlanilla('${planilla.id}')">ACEPTAR</button>
                    <button onclick="denegarPlanilla('${planilla.id}')">RECHAZAR</button>
                </div>
                <div class="separador"></div>`;
            contenedor.innerHTML += planillaHTML;
        });
    } catch (error) {
        console.error("Error al obtener planillas:", error);
    }
};
}

===>>> YA teniendo esto, genera LOS CODIGOS COMPLETOS para cada funcion modificada. <<<===